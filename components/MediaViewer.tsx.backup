'use client'

import { useState, useEffect } from 'react'
import { X, ChevronLeft, ChevronRight, Download, ExternalLink, Play, FileText, Image } from 'lucide-react'

interface MediaViewerProps {
  items: Array<{
    id: string
    url: string
    name?: string
    caption?: string
    type: 'photo' | 'video' | 'file'
    mime_type?: string
  }>
  initialIndex: number
  onClose: () => void
}

export default function MediaViewer({ items, initialIndex, onClose }: MediaViewerProps) {
  const [currentIndex, setCurrentIndex] = useState(initialIndex)
  const [imageError, setImageError] = useState(false)
  
  const currentItem = items[currentIndex]
  
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === 'Escape') onClose()
      if (e.key === 'ArrowLeft') goToPrevious()
      if (e.key === 'ArrowRight') goToNext()
    }
    
    window.addEventListener('keydown', handleKeyDown)
    return () => window.removeEventListener('keydown', handleKeyDown)
  }, [])

  const goToPrevious = () => {
    setCurrentIndex(prev => prev > 0 ? prev - 1 : items.length - 1)
    setImageError(false)
  }

  const goToNext = () => {
    setCurrentIndex(prev => prev < items.length - 1 ? prev + 1 : 0)
    setImageError(false)
  }

  const handleDownload = () => {
    const link = document.createElement('a')
    link.href = currentItem.url
    link.download = currentItem.name || 'download'
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
  }

  const openInNewTab = () => {
    window.open(currentItem.url, '_blank')
  }

  const renderContent = () => {
    const { mime_type, url, name, type } = currentItem

    // Handle images
    if (type === 'photo' || mime_type?.startsWith('image/')) {
      return (
        <div className="flex items-center justify-center h-full max-h-[80vh]">
          {imageError ? (
            <div className="flex flex-col items-center text-white">
              <Image className="w-16 h-16 mb-4 opacity-50" />
              <p>Failed to load image</p>
              <button 
                onClick={openInNewTab}
                className="mt-2 px-4 py-2 bg-blue-600 rounded hover:bg-blue-700"
              >
                Open in New Tab
              </button>
            </div>
          ) : (
            <img
              src={url}
              alt={name || 'Media'}
              className="max-w-full max-h-full object-contain rounded"
              onError={() => setImageError(true)}
            />
          )}
        </div>
      )
    }

    // Handle videos
    if (type === 'video' || mime_type?.startsWith('video/')) {
      return (
        <div className="flex items-center justify-center h-full max-h-[80vh]">
          <video 
            controls 
            className="max-w-full max-h-full rounded"
            poster=""
          >
            <source src={url} type={mime_type || 'video/mp4'} />
            Your browser does not support the video tag.
          </video>
        </div>
      )
    }

    // Handle PDFs
    if (mime_type?.includes('pdf')) {
      return (
        <div className="flex flex-col items-center justify-center h-full text-white">
          <FileText className="w-16 h-16 mb-4 opacity-70" />
          <h3 className="text-xl mb-2">{name}</h3>
          <p className="text-gray-300 mb-6">PDF Document</p>
          <div className="flex gap-4">
            <button 
              onClick={handleDownload}
              className="px-6 py-3 bg-blue-600 rounded-lg hover:bg-blue-700 flex items-center gap-2"
            >
              <Download className="w-4 h-4" />
              Download PDF
            </button>
            <button 
              onClick={openInNewTab}
              className="px-6 py-3 bg-gray-600 rounded-lg hover:bg-gray-700 flex items-center gap-2"
            >
              <ExternalLink className="w-4 h-4" />
              Open in New Tab
            </button>
          </div>
        </div>
      )
    }

    // Handle other file types
    return (
      <div className="flex flex-col items-center justify-center h-full text-white">
        <FileText className="w-16 h-16 mb-4 opacity-70" />
        <h3 className="text-xl mb-2">{name}</h3>
        <p className="text-gray-300 mb-6">{mime_type || 'File'}</p>
        <div className="flex gap-4">
          <button 
            onClick={handleDownload}
            className="px-6 py-3 bg-blue-600 rounded-lg hover:bg-blue-700 flex items-center gap-2"
          >
            <Download className="w-4 h-4" />
            Download File
          </button>
          <button 
            onClick={openInNewTab}
            className="px-6 py-3 bg-gray-600 rounded-lg hover:bg-gray-700 flex items-center gap-2"
          >
            <ExternalLink className="w-4 h-4" />
            Open in New Tab
          </button>
        </div>
      </div>
    )
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-90 z-50 flex items-center justify-center">
      {/* Close button */}
      <button
        onClick={onClose}
        className="absolute top-4 right-4 text-white hover:text-gray-300 z-10"
      >
        <X className="w-8 h-8" />
      </button>

      {/* Navigation buttons */}
      {items.length > 1 && (
        <>
          <button
            onClick={goToPrevious}
            className="absolute left-4 top-1/2 transform -translate-y-1/2 text-white hover:text-gray-300 z-10"
          >
            <ChevronLeft className="w-12 h-12" />
          </button>
          <button
            onClick={goToNext}
            className="absolute right-4 top-1/2 transform -translate-y-1/2 text-white hover:text-gray-300 z-10"
          >
            <ChevronRight className="w-12 h-12" />
          </button>
        </>
      )}

      {/* Content */}
      <div className="w-full h-full p-8">
        {renderContent()}
      </div>

      {/* Info bar */}
      <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2 text-white text-center">
        <p className="text-lg font-medium">{currentItem.name}</p>
        {currentItem.caption && (
          <p className="text-gray-300 text-sm mt-1">{currentItem.caption}</p>
        )}
        {items.length > 1 && (
          <p className="text-gray-400 text-sm mt-2">
            {currentIndex + 1} of {items.length}
          </p>
        )}
      </div>

      {/* Action buttons */}
      <div className="absolute top-4 left-4 flex gap-2">
        <button 
          onClick={handleDownload}
          className="p-2 bg-blue-600 rounded-lg hover:bg-blue-700 text-white"
          title="Download"
        >
          <Download className="w-4 h-4" />
        </button>
        <button 
          onClick={openInNewTab}
          className="p-2 bg-gray-600 rounded-lg hover:bg-gray-700 text-white"
          title="Open in New Tab"
        >
          <ExternalLink className="w-4 h-4" />
        </button>
      </div>
    </div>
  )
}
