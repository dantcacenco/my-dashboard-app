'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { createClient } from '@/lib/supabase/client'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { 
  ArrowLeft, Edit, Calendar, Clock, MapPin, User, 
  FileText, Camera, Upload, Plus, X, Save, Trash2,
  DollarSign, Link as LinkIcon, FileCheck
} from 'lucide-react'
import Link from 'next/link'
import { toast } from 'sonner'
import MediaUpload from '@/components/uploads/MediaUpload'
import FileUpload from '@/components/uploads/FileUpload'
import MediaViewer from '@/components/MediaViewer'
import VideoThumbnail from '@/components/VideoThumbnail'
import { EditJobModal } from './EditJobModal'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog'

interface JobDetailViewProps {
  job: any
  userRole: string
  userId?: string
}

export default function JobDetailView({ job: initialJob, userRole, userId }: JobDetailViewProps) {
  const router = useRouter()
  const supabase = createClient()
  const [job, setJob] = useState(initialJob)
  const [isEditingNotes, setIsEditingNotes] = useState(false)
  const [notesText, setNotesText] = useState(job.notes || '')
  const [showEditModal, setShowEditModal] = useState(false)
  const [showDeleteModal, setShowDeleteModal] = useState(false)
  const [isDeleting, setIsDeleting] = useState(false)
  const [technicians, setTechnicians] = useState<any[]>([])
  const [assignedTechnicians, setAssignedTechnicians] = useState<any[]>([])
  const [jobPhotos, setJobPhotos] = useState<any[]>([])
  const [jobFiles, setJobFiles] = useState<any[]>([])
  const [currentUserId, setCurrentUserId] = useState(userId || '')
  const [viewerOpen, setViewerOpen] = useState(false)
  const [viewerItems, setViewerItems] = useState<any[]>([])
  const [viewerIndex, setViewerIndex] = useState(0)
  const [proposal, setProposal] = useState<any>(null)

  useEffect(() => {
    loadTechnicians()
    loadAssignedTechnicians()
    loadJobMedia()
    loadJobFiles()
    loadProposal()
    if (!userId) {
      getCurrentUser()
    }
  }, [job.id])

  const getCurrentUser = async () => {
    const { data: { user } } = await supabase.auth.getUser()
    if (user) {
      setCurrentUserId(user.id)
    }
  }

  const loadProposal = async () => {
    if (job.proposal_id) {
      const { data } = await supabase
        .from('proposals')
        .select('*')
        .eq('id', job.proposal_id)
        .single()
      setProposal(data)
    }
  }

  const loadTechnicians = async () => {
    const { data } = await supabase
      .from('profiles')
      .select('id, email, full_name, role')
      .eq('role', 'technician')
      .eq('is_active', true)

    setTechnicians(data || [])
  }

  const loadAssignedTechnicians = async () => {
    const { data } = await supabase
      .from('job_technicians')
      .select(`
        technician_id,
        profiles (
          id,
          email,
          full_name,
          role
        )
      `)
      .eq('job_id', job.id)

    if (data) {
      setAssignedTechnicians(data.map((item: any) => item.profiles))
    }
  }

  const loadJobMedia = async () => {
    const { data } = await supabase
      .from('job_photos')
      .select('*')
      .eq('job_id', job.id)
      .order('created_at', { ascending: true })

    setJobPhotos(data || [])
  }

  const loadJobFiles = async () => {
    const { data } = await supabase
      .from('job_files')
      .select('*')
      .eq('job_id', job.id)
      .order('created_at', { ascending: false })

    setJobFiles(data || [])
  }

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD'
    }).format(amount)
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'not_scheduled': return 'bg-gray-500'
      case 'scheduled': return 'bg-blue-500'
      case 'in_progress': return 'bg-yellow-500'
      case 'completed': return 'bg-green-500'
      case 'cancelled': return 'bg-red-500'
      default: return 'bg-gray-500'
    }
  }

  const handleSaveNotes = async () => {
    try {
      const { error } = await supabase
        .from('jobs')
        .update({ notes: notesText })
        .eq('id', job.id)

      if (error) throw error

      setJob({ ...job, notes: notesText })
      setIsEditingNotes(false)
      toast.success('Notes saved successfully')
    } catch (error) {
      console.error('Error saving notes:', error)
      toast.error('Failed to save notes')
    }
  }

  const handleTechnicianToggle = async (techId: string) => {
    const isAssigned = assignedTechnicians.some(t => t.id === techId)
    
    try {
      if (isAssigned) {
        // Remove technician
        const { error } = await supabase
          .from('job_technicians')
          .delete()
          .eq('job_id', job.id)
          .eq('technician_id', techId)

        if (error) throw error
        
        // Reload assigned technicians from database
        await loadAssignedTechnicians()
        toast.success('Technician removed')
      } else {
        // Add technician - first check if already exists
        const { data: existing } = await supabase
          .from('job_technicians')
          .select('id')
          .eq('job_id', job.id)
          .eq('technician_id', techId)
          .single()
        
        if (!existing) {
          // Only insert if doesn't exist
          const { error } = await supabase
            .from('job_technicians')
            .insert({
              job_id: job.id,
              technician_id: techId
            })

          if (error) throw error
          
          // Reload assigned technicians from database
          await loadAssignedTechnicians()
          toast.success('Technician assigned')
        } else {
          toast.info('Technician already assigned')
        }
      }
    } catch (error) {
      console.error('Error toggling technician:', error)
      toast.error('Failed to update technician assignment')
    }
  }

  const handleDeleteJob = async () => {
    setIsDeleting(true)
    
    try {
      // Delete related records first (due to foreign key constraints)
      // Delete job technicians
      await supabase
        .from('job_technicians')
        .delete()
        .eq('job_id', job.id)

      // Delete job photos
      await supabase
        .from('job_photos')
        .delete()
        .eq('job_id', job.id)

      // Delete job files
      await supabase
        .from('job_files')
        .delete()
        .eq('job_id', job.id)

      // Finally delete the job itself
      const { error } = await supabase
        .from('jobs')
        .delete()
        .eq('id', job.id)

      if (error) throw error

      toast.success('Job deleted successfully')
      router.push('/jobs')
    } catch (error) {
      console.error('Error deleting job:', error)
      toast.error('Failed to delete job')
      setIsDeleting(false)
    }
  }

  const openMediaViewer = (photos: any[], index: number) => {
    // Format photos for MediaViewer component
    const items = photos.map(photo => ({
      id: photo.id,
      url: photo.photo_url,
      name: photo.caption || 'Job Photo',
      caption: photo.caption,
      type: photo.mime_type?.startsWith('video/') ? 'video' : 'photo',
      mime_type: photo.mime_type
    }))
    
    setViewerItems(items)
    setViewerIndex(index)
    setViewerOpen(true)
  }

  const openFileViewer = (files: any[], index: number) => {
    // Format files for MediaViewer component
    const items = files.map(file => ({
      id: file.id,
      url: file.file_url,
      name: file.file_name,
      caption: file.file_name,
      type: 'file' as const,
      mime_type: file.mime_type || 'application/octet-stream'
    }))
    
    setViewerItems(items)
    setViewerIndex(index)
    setViewerOpen(true)
  }

  // Format the job description/overview with proper line breaks
  const formatJobOverview = (description: string | null | undefined) => {
    if (!description) return 'No overview available'
    
    // Split by line breaks and format sections
    return description.split('\n').map((line, index) => {
      // Check if it's a header line (SERVICES: or ADD-ONS:)
      if (line.includes('SERVICES:') || line.includes('ADD-ONS:')) {
        return (
          <div key={index} className="font-semibold mt-2 mb-1">
            {line}
          </div>
        )
      }
      // Regular lines
      if (line.trim()) {
        return (
          <div key={index} className="ml-2">
            {line}
          </div>
        )
      }
      // Empty lines for spacing
      return <div key={index} className="h-2" />
    })
  }

  return (
    <div className="max-w-7xl mx-auto p-4 space-y-6">
      {/* Header */}
      <div className="flex justify-between items-start">
        <div className="flex items-start gap-4">
          <Link href="/jobs">
            <Button variant="ghost" size="sm">
              <ArrowLeft className="h-4 w-4" />
            </Button>
          </Link>
          <div>
            <h1 className="text-2xl font-bold">Job {job.job_number}</h1>
            <p className="text-muted-foreground">{job.title}</p>
          </div>
          <Badge className={getStatusColor(job.scheduled_date ? 'scheduled' : job.status)}>
            {job.scheduled_date ? 'SCHEDULED' : job.status.replace('_', ' ').toUpperCase()}
          </Badge>
        </div>
        <div className="flex gap-2">
          {userRole === 'boss' && (
            <Button 
              variant="destructive" 
              onClick={() => setShowDeleteModal(true)}
            >
              <Trash2 className="h-4 w-4 mr-2" />
              Delete
            </Button>
          )}
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Main Content - Left Side */}
        <div className="lg:col-span-2 space-y-6">
          
          {/* Technicians Card */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <User className="h-5 w-5" />
                Assigned Technicians
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                {/* Assigned Technicians */}
                {assignedTechnicians.map((tech) => (
                  <div key={tech.id} className="flex items-center justify-between p-2 bg-accent rounded">
                    <span>{tech.full_name || tech.email}</span>
                    {userRole === 'boss' && (
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => handleTechnicianToggle(tech.id)}
                      >
                        <X className="h-4 w-4" />
                      </Button>
                    )}
                  </div>
                ))}
                
                {/* Add Technician Dropdown */}
                {userRole === 'boss' && (
                  <select
                    className="w-full p-2 border rounded"
                    value=""
                    onChange={(e) => e.target.value && handleTechnicianToggle(e.target.value)}
                  >
                    <option value="">Add a technician...</option>
                    {technicians
                      .filter(t => !assignedTechnicians.some(at => at.id === t.id))
                      .map(tech => (
                        <option key={tech.id} value={tech.id}>
                          {tech.full_name || tech.email}
                        </option>
                      ))}
                  </select>
                )}
                
                {assignedTechnicians.length === 0 && userRole !== 'boss' && (
                  <p className="text-muted-foreground">No technicians assigned yet</p>
                )}
              </div>
            </CardContent>
          </Card>

          {/* Photos & Videos Card */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Camera className="h-5 w-5" />
                Photos & Videos
              </CardTitle>
            </CardHeader>
            <CardContent>
              {currentUserId && (
                <MediaUpload
                  jobId={job.id}
                  userId={currentUserId}
                  onUploadComplete={loadJobMedia}
                />
              )}
              
              {jobPhotos.length > 0 && (
                <div className="grid grid-cols-2 md:grid-cols-3 gap-4 mt-4">
                  {jobPhotos.map((photo, index) => (
                    <div
                      key={photo.id}
                      className="relative group cursor-pointer"
                      onClick={() => openMediaViewer(jobPhotos, index)}
                    >
                      {photo.mime_type?.startsWith('video/') ? (
                        <VideoThumbnail videoUrl={photo.photo_url} onClick={() => openMediaViewer(jobPhotos, index)} />
                      ) : (
                        <img
                          src={photo.photo_url}
                          alt={photo.caption || 'Job photo'}
                          className="w-full h-32 object-cover rounded hover:opacity-90 transition"
                        />
                      )}
                      {photo.caption && (
                        <p className="text-xs mt-1 text-muted-foreground truncate">
                          {photo.caption}
                        </p>
                      )}
                    </div>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>

          {/* Files Card */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <FileCheck className="h-5 w-5" />
                Documents & Files
              </CardTitle>
            </CardHeader>
            <CardContent>
              {currentUserId && (
                <FileUpload
                  jobId={job.id}
                  userId={currentUserId}
                  onUploadComplete={loadJobFiles}
                />
              )}
              
              {jobFiles.length > 0 && (
                <div className="space-y-2 mt-4">
                  {jobFiles.map((file) => (
                    <div key={file.id} className="flex items-center justify-between p-2 border rounded">
                      <div className="flex items-center gap-2">
                        <FileText className="h-4 w-4" />
                        <div>
                          <p className="text-sm font-medium">{file.file_name}</p>
                          <p className="text-xs text-muted-foreground">
                            {new Date(file.created_at).toLocaleDateString()}
                          </p>
                        </div>
                      </div>
                      <a
                        href={file.url}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-blue-500 hover:underline text-sm"
                      >
                        View
                      </a>
                    </div>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>

          {/* Notes Card */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                <span className="flex items-center gap-2">
                  <FileText className="h-5 w-5" />
                  Internal Notes
                </span>
                {userRole === 'boss' && (
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => isEditingNotes ? handleSaveNotes() : setIsEditingNotes(true)}
                  >
                    {isEditingNotes ? (
                      <>
                        <Save className="h-4 w-4 mr-2" />
                        Save
                      </>
                    ) : (
                      <>
                        <Edit className="h-4 w-4 mr-2" />
                        Edit
                      </>
                    )}
                  </Button>
                )}
              </CardTitle>
            </CardHeader>
            <CardContent>
              {isEditingNotes ? (
                <textarea
                  value={notesText}
                  onChange={(e) => setNotesText(e.target.value)}
                  className="w-full p-2 border rounded min-h-[100px]"
                  placeholder="Add notes..."
                />
              ) : (
                <p className="text-muted-foreground">
                  {job.notes || 'No notes yet'}
                </p>
              )}
            </CardContent>
          </Card>
        </div>

        {/* Right Sidebar */}
        <div className="space-y-6">
          {/* Job Details Card */}
          <Card>
            <CardHeader className="flex flex-row items-center justify-between">
              <CardTitle>Job Details</CardTitle>
              <Button size="sm" variant="outline" onClick={() => setShowEditModal(true)}>
                <Edit className="h-4 w-4 mr-1" />
                Edit
              </Button>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div>
                  <p className="text-sm text-muted-foreground">Customer</p>
                  <p className="font-medium">{job.customers?.name || job.customer_name || 'N/A'}</p>
                </div>
                
                <div>
                  <p className="text-sm text-muted-foreground">Job Type</p>
                  <p className="font-medium">{job.job_type}</p>
                </div>
                
                <div>
                  <p className="text-sm text-muted-foreground">Job Overview</p>
                  <div className="font-medium">
                    {formatJobOverview(job.description)}
                  </div>
                </div>
                
                <div>
                  <p className="text-sm text-muted-foreground">Scheduled Date</p>
                  <p className="font-medium">
                    {job.scheduled_date ? new Date(job.scheduled_date).toLocaleDateString() : 'Not scheduled'}
                  </p>
                </div>
                
                {job.scheduled_time && (
                  <div>
                    <p className="text-sm text-muted-foreground">Scheduled Time</p>
                    <p className="font-medium">
                      {job.scheduled_time}
                    </p>
                  </div>
                )}
                
                <div>
                  <p className="text-sm text-muted-foreground">Service Address</p>
                  <p className="font-medium">
                    {job.service_address || 'No address specified'}
                  </p>
                </div>

                {/* Financial Information */}
                {userRole === 'boss' && (
                  <>
                    <div>
                      <p className="text-sm text-muted-foreground">Total Value</p>
                      <p className="font-medium">
                        {formatCurrency(job.total_value || 0)}
                      </p>
                    </div>

                    <div>
                      <p className="text-sm text-muted-foreground">Payment Status</p>
                      <Badge variant={job.payment_status === 'paid' ? 'default' : 'secondary'}>
                        {job.payment_status || 'pending'}
                      </Badge>
                    </div>
                  </>
                )}

                {/* Link to Proposal */}
                {job.proposal_id && proposal && (
                  <div>
                    <p className="text-sm text-muted-foreground">Related Proposal</p>
                    <Link href={`/proposals/${job.proposal_id}`}>
                      <Button variant="link" className="p-0 h-auto">
                        <LinkIcon className="h-4 w-4 mr-1" />
                        #{proposal.proposal_number}
                      </Button>
                    </Link>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Edit Modal */}
      {showEditModal && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto p-6">
            <h2 className="text-xl font-bold mb-4">Edit Job</h2>
            {/* Add your edit form here */}
            <div className="flex justify-end gap-2 mt-4">
              <Button variant="outline" onClick={() => setShowEditModal(false)}>
                Cancel
              </Button>
              <Button>Save Changes</Button>
            </div>
          </div>
        </div>
      )}

      {/* Delete Confirmation Modal */}
      <Dialog open={showDeleteModal} onOpenChange={setShowDeleteModal}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Delete Job</DialogTitle>
            <DialogDescription>
              Are you sure you want to delete this job? This action cannot be undone.
            </DialogDescription>
          </DialogHeader>
          <div className="py-4">
            <p className="text-sm text-muted-foreground">
              Job #{job.job_number}: {job.title}
            </p>
            <p className="text-sm text-muted-foreground mt-2">
              Customer: {job.customers?.name || 'N/A'}
            </p>
          </div>
          <DialogFooter>
            <Button 
              variant="outline" 
              onClick={() => setShowDeleteModal(false)}
              disabled={isDeleting}
            >
              Cancel
            </Button>
            <Button 
              variant="destructive" 
              onClick={handleDeleteJob}
              disabled={isDeleting}
            >
              {isDeleting ? 'Deleting...' : 'Delete Job'}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Media Viewer */}
      {viewerOpen && (
        <MediaViewer
          items={viewerItems}
          initialIndex={viewerIndex}
          onClose={() => setViewerOpen(false)}
        />
      )}

      {/* Edit Job Modal */}
      <EditJobModal
        job={job}
        isOpen={showEditModal}
        onClose={() => setShowEditModal(false)}
        onJobUpdated={async () => {
          // Refresh job data
          const { data } = await supabase
            .from('jobs')
            .select(`
              *,
              customers!inner (
                id,
                name,
                email,
                phone,
                address
              ),
              proposals (
                id,
                status,
                total_amount
              )
            `)
            .eq('id', job.id)
            .single()
          
          if (data) {
            setJob(data)
          }
          setShowEditModal(false)
          toast.success('Job updated successfully')
        }}
      />
    </div>
  )
}
